#!/bin/bash
PATH="$PWD/node_modules/.bin":$PATH
set -e

hello() {
    echo Hello from taskfile
    echo args: "$1" "$2" "$3"
}

remark_run() {
    node -r ts-node/register/transpile-only node_modules/remark-cli/cli.js readme.md "$@"
}

remark_output() {
    remark_run --output
}

build() {
    set -x
    rm -rfv dist
    cp -rfv src dist
    cat tsconfig.json | jq 'del(.include, .compilerOptions.outDir)' > dist/tsconfig.json
    cp -v README.md LICENSE package.json dist
    cd dist
    /usr/bin/find . -name '*.spec.ts' | xargs rm -rvf
    tsc -p .
    rm -rvf tsconfig.json
    cd ..
    set +x
}

deploy_package() {
    root=`pwd`
    build_package $1
    cd $1
    npx semantic-release -e semantic-release-monorepo
    cd $root
}

# build sub package (monorepo)
build_package() {
    echo Building package $1
    set -x

    # Prepare
    root=`pwd`
    set +x
    rootPackage=`cat package.json`
    rootTsConfig=`cat tsconfig.json`
    rootHomepage=`echo "$rootPackage" | jq -r '.homepage' | sed s'/#readme//'`
    set -x
    homepage="$rootHomepage/tree/master/$1"

    # Switching directory to package
    cd "$root/$1"

    # Clean
    rm -rfv dist
    mkdir dist

    # Configure package.json
    [ ! -f package.json ] && npm init -y 1> /dev/null
    localPackage=`cat package.json`
    localPackage=`echo "$localPackage" | jq '.license = "MIT"'`
    author=`echo "$localPackage" | jq -r '.author'`
    if [ -z "$author" ]; then
        author=`date +"%Y"`
        localPackage=`echo "$localPackage" | jq --arg author "$author" '.author = $author'`
    fi
    echo "$localPackage" > package.json

    # Merge root and local tsconfig files
    localTsConfig=`cat tsconfig.json || echo {}`
    echo "$rootTsConfig" "$localTsConfig" \
        | jq -s '.[0] * .[1]' \
        | jq 'del(.include, .compilerOptions.outDir)' \
        > dist/tsconfig.json

    # Remark
    [ ! -f ./.remarkrc.js ] && cp -v "$root/.remarkrc.js" .
    npx remark-cli README.md --output

    # Build
    cp -rfv *.ts ./dist
    cd dist
    /usr/bin/find . -name '*.spec.ts' | xargs rm -rvf
    tsc -p .
    rm -rvf tsconfig.json
    cd ..
    # Return to package directory
    # Copy other files to dist
    cp -vf README.md LICENSE package.json dist || true
    cd $root
    set +x
}

bundle() {
    set -x
    rm -rfv dist
    cp -rfv src dist
    cat tsconfig.json | jq '.compilerOptions.module = "esnext" | del(.include, .compilerOptions.outDir)' > dist/tsconfig.json
    cp -v README.md LICENSE package.json dist
    cd dist
    /usr/bin/find . -name '*.spec.ts' | xargs rm -rvf
    npx microbundle -i index.ts --no-compress -f es,umd -o .
    rm -rvf tsconfig.json
    /usr/bin/find . -name '.rts2*' | xargs rm -rf
    package=$(cat package.json)
    echo "$package" | jq '.main = "bundle.umd.js"' \
        | jq '.module = "bundle.mjs"' \
        > package.json
    cd ..
    set +x
}

generate_liense() {
    npx license-generator install MIT
}

# Build frontend package
build_f() {
    ng-packagr
}

eslint_run() {
    eslint src --ext ts
}

lint_watch() {
    npm run tsclint:w 2>&1 &
    npm run eslint:w 2>&1 &
}


git_last_release_tag() {
    result=""
    rev=$(git rev-list --max-count=1 --tags="v[0-9]*\\.[0-9]*\\.[0-9]*")
    if [ -n "$rev" ]; then
        result=$(git describe --tags $rev)
    fi
    if [ -n "$result" ]; then
        result=$(git rev-list --max-parents=0 HEAD)
    fi
    echo $result
}

commit_lint() {
    set -x
    from=$(git_last_release_tag)
    commitlint --from $from
}

"$@"
